import mechanize
import cookielib
import random
import urllib
import time
from enum import Enum

lvlstr = {0 : "SILENT",1 : "ERROR",2 : "WARNING",3 : "INFO", 4: "ALL"}

class DEBUGLVL(Enum):
	SILENT, ERROR, WARNING, INFO, ALL = range(5)

## Tap hop cac user-agent de fake ;))	
useragents = [
	'Mozilla/4.0 (compatible; MSIE 5.0; SunOS 5.10 sun4u; X11)',
	'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.2pre) Gecko/20100207 Ubuntu/9.04 (jaunty) Namoroka/3.6.2pre',
	'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Avant Browser;',
	'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0)',
	'Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.1)',
	'Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.0.6)',
	'Microsoft Internet Explorer/4.0b1 (Windows 95)',
	'Opera/8.00 (Windows NT 5.1; U; en)', 'amaya/9.51 libwww/5.4.0',
	'Mozilla/4.0 (compatible; MSIE 5.0; AOL 4.0; Windows 95; c_athome)',
	'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)',
	'Mozilla/5.0 (compatible; Konqueror/3.5; Linux) KHTML/3.5.5 (like Gecko) (Kubuntu)',
	'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; ZoomSpider.net bot; .NET CLR 1.1.4322)',
	'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; QihooBot 1.0 qihoobot@qihoo.net)',
	'Mozilla/4.0 (compatible; MSIE 5.0; Windows ME) Opera 5.11 [en]'
]
class SW_HTTP_REQ(object):
	params = {}
	def __init__(self):
		## Common
		self.params["debug_level"] = 1
		self.params["rsp_file"] = ""
		self.params["request_handler"] = ""
		## Proxy
		self.params["proxy"] = {}
		self.params["proxy"]["isset"] = False
		self.params["proxy"]["ip"] = ""
		self.params["proxy"]["port"] = ""
		self.params["proxy"]["connection"] = ""
		self.params["proxy"]["user"] = ""
		self.params["proxy"]["password"] = ""
	
	def printDebug(self,msg,level):
		global lvlstr
		if level <= self.params["debug_level"]:
			print lvlstr[level] + ":" + str(msg) + "\n"

	def setDebugLevel(self,lvl):
		try:
			tmp = int(lvl)
			if tmp > 4 or tmp < 0:
				self.printDebug(DEBUGLVL.ERROR,"Level is invalid")
			else:
				self.params["debug_level"] = tmp
		except:
			self.printDebug(DEBUGLVL.ERROR,"Level is invalid")
	
	def setProxy(self,proxy,port):
		self.params["proxy"]["ip"] = str(proxy)
		self.params["proxy"]["port"] = str(port)
		self.params["proxy"]["connection"] = str(proxy) + ":" + str(port)
		self.printDebug("Proxy set to: " + self.params["proxy"]["connection"],DEBUGLVL.INFO)
		self.params["proxy"]["isset"] = True
	
	def setProxyAuth(self,usr,pwd):
		self.params["proxy"]["user"] = usr
		self.params["proxy"]["password"] = pwd
		self.printDebug("Proxy AUTH set to: " + self.params["proxy"]["user"] + "@@@" + self.params["proxy"]["password"],DEBUGLVL.INFO)

	def createRequestObject(self):
		br = ""
		try:
			br = mechanize.Browser()
			cj = cookielib.LWPCookieJar()
			br.set_cookiejar(cj)
			br.set_handle_equiv(True)
			br.set_handle_redirect(True)
			br.set_handle_referer(True)
			br.set_handle_robots(False)
			br.set_debug_http(False)
			br.set_debug_redirects(False)
			br.set_debug_redirects(False)
			br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)
			if self.params["proxy"]["connection"] != "":
				br.set_proxies({"http": self.params["proxy"]["connection"]})
			if self.params["proxy"]["user"] != "":
				br.add_proxy_password(self.params["proxy"]["user"], self.params["proxy"]["password"])
			self.printDebug("Request object creation done ! ",DEBUGLVL.INFO)
			self.params["request_handler"] = br
			return br
		except KeyboardInterrupt:
			self.printDebug("Receive interrupt ! ",DEBUGLVL.ERROR)
			sys.exit(1)
	
	def setResFile(self,fname):
		self.params["rsp_file"] = fname

	def saveResponse(self,data):
		if self.params["rsp_file"] != "":
			try:
				os.remove(self.params["rsp_file"])
			except:
				pass;
			f = open(self.params["rsp_file"],"w")
			f.write(data)
			f.close()

	def findForm(self,testatt):
		fidx = 0
		found = -1
		for f in self.params["request_handler"].forms():
			try:
				self.printDebug("Testing form_ " + str(fidx),DEBUGLVL.INFO)
				f[testatt] = ""
				self.params["request_handler"].form = f
				found = fidx
				break
			except:
				fidx = fidx + 1
				pass
		self.printDebug("Found form #" + str(found),DEBUGLVL.INFO)
		return found

	def postDataContinuos(self,site,fnr,elementdict,tout = 3):
		try:
			opensite = self.params["request_handler"].open(site,timeout=tout)
		except Exception, e:
			self.printDebug(str(e),DEBUGLVL.ERROR)
			return 0
		dict = elementdict.items()
		self.printDebug("POST request params: ",DEBUGLVL.INFO)
		foundForm = False
		for e in dict:
			if foundForm == False:
				rs = self.findForm(e[0])
				if rs != -1:
					self.params["request_handler"].select_form(nr = rs)
					foundForm = True
				else:
					self.printDebug("Couldn't find request form",DEBUGLVL.ERROR)
					return 0
			self.printDebug("\t" + e[0] + "=" + e[1],DEBUGLVL.INFO)
			self.params["request_handler"].form[e[0]] = e[1]
		self.params["request_handler"].submit()
		response = self.params["request_handler"].response().read()
		self.saveResponse(response)
		return response

	def postData(self,site,fnr,elementdict,tout = 3):
		self.createRequestObject()
		self.params["request_handler"].addheaders = [('User-agent', random.choice(useragents))]
		try:
			opensite = self.params["request_handler"].open(site,timeout=tout)
		except Exception, e:
			self.printDebug(str(e),DEBUGLVL.ERROR)
			return 0
		dict = elementdict.items()
		self.printDebug("POST request params: ",DEBUGLVL.INFO)
		foundForm = False
		for e in dict:
			if foundForm == False:
				rs = self.findForm(e[0])
				if rs != -1:
					self.params["request_handler"].select_form(nr = rs)
					try:
						self.params["request_handler"].find_control(type="checkbox").items[0].selected =True
					except:
						pass;
					foundForm = True
				else:
					self.printDebug("Couldn't find request form",DEBUGLVL.ERROR)
					return 0
			self.printDebug("\t" + e[0] + "=" + e[1],DEBUGLVL.INFO)
			self.params["request_handler"].form[e[0]] = e[1]
		try:
			self.params["request_handler"].submit()
			response = self.params["request_handler"].response().read()
			self.saveResponse(response)
		except:
			return 0
		return response
		
	def getData(self,site,fnr,elementdict,tout = 3):
		if len(elementdict) != 0:
			site = site + "?"
		dict = elementdict.items()
		self.printDebug("GET request params: ",DEBUGLVL.INFO)
		for e in dict:
			self.printDebug("\t" + e[0] + "=" + e[1],DEBUGLVL.INFO)
			site += e[0] + "=" + e[1] + "&"
		br = self.createRequestObject()
		br.addheaders = [('User-agent', random.choice(useragents))]
		self.printDebug("Full URI: " + site,DEBUGLVL.INFO)
		try:
			opensite = br.open(site,timeout=tout)
		except Exception, e:
			self.printDebug(str(e),DEBUGLVL.ERROR)
			return 0
		response = br.response().read()
		self.saveResponse(response)
		return response

	def getData_unicode(self,site,elementdict,tout = 3):
		if len(elementdict) != 0:
			site = site + "?"
		dict = elementdict.items()
		self.printDebug("GET request params: ",DEBUGLVL.INFO)
		for e in dict:
			self.printDebug("\t" + e[0] + "=" + e[1],DEBUGLVL.INFO)
			#site += e[0] + "=" + e[1] + "&"
		site = site + urllib.urlencode(elementdict)
		br = self.createRequestObject()
		br.addheaders = [('User-agent', random.choice(useragents))]
		self.printDebug("Full URI: " + site,DEBUGLVL.INFO)
		try:
			opensite = br.open(site,timeout=tout)
		except Exception, e:
			self.printDebug(str(e),DEBUGLVL.ERROR)
			return 0
		response = br.response().read()
		self.saveResponse(response)
		return response

	def parseResult(self,response,unexpected_ret,begin_tag,end_tag,failed_tag = '',success_tag = ''):
		if failed_tag != "":
			if response.find(failed_tag) != -1:
				self.printDebug("Failed tag found !",DEBUGLVL.WARNING)
				return unexpected_ret
		if success_tag != "":
			if response.find(success_tag) == -1:
				self.printDebug("Success tag not found !",DEBUGLVL.WARNING)
				return unexpected_ret
		begin_idx = response.find(begin_tag)
		if begin_idx == -1:
			self.printDebug("Begin tag not found !",DEBUGLVL.WARNING)
			return unexpected_ret
		end_idx = response.find(end_tag,begin_idx + 1)
		result = response[begin_idx + len(begin_tag) : end_idx]
		self.printDebug("Found " + result,DEBUGLVL.INFO)
		return result